task 1
SELECT * FROM employees;

task 2
SELECT name, salary FROM employees;

task 3
SELECT * FROM employees WHERE salary > 50000;

task 4
SELECT * FROM employees WHERE name LIKE 'J%';

task 5
SELECT * FROM employees WHERE department_id IN (1, 2, 3);

task 6
SELECT * FROM employees ORDER BY hire_date DESC;

task 7
SELECT COUNT(*) FROM employees;

task 8
SELECT SUM(salary) FROM employees;

task 9
SELECT AVG(salary) FROM employees;

task 10
SELECT MIN(salary) FROM employees;
SELECT MAX(salary) FROM employees;

task 11
SELECT * FROM employees WHERE salary > 50000;

SELECT department_id, AVG(salary) 
FROM employees 
GROUP BY department_id 
HAVING AVG(salary) > 50000;


task 12
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100),
    salary DECIMAL(10, 2)
);

CREATE TABLE employee_details (
    employee_id INT PRIMARY KEY,
    address VARCHAR(255),
    phone_number VARCHAR(15),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);


task 13
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100)
);

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100),
    salary DECIMAL(10, 2),
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);

task 14
CREATE TABLE students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(100)
);

CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100)
);

CREATE TABLE student_courses (
    student_id INT,
    course_id INT,
    PRIMARY KEY (student_id, course_id),
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);


task 15
ALTER TABLE employees
ADD CONSTRAINT fk_department
FOREIGN KEY (department_id)
REFERENCES departments(department_id);

task 16
ALTER TABLE employees
MODIFY name VARCHAR(100) NOT NULL;

task 17
ALTER TABLE employees
ADD CONSTRAINT unique_email UNIQUE (email);

task 18
ALTER TABLE employees
ADD CONSTRAINT check_salary
CHECK (salary > 0);

task 19
ALTER TABLE employees
MODIFY status VARCHAR(20) DEFAULT 'Active';

task 20
CREATE DATABASE company_db;
USE company_db;

CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    salary DECIMAL(10, 2) CHECK (salary > 0),
    status VARCHAR(20) DEFAULT 'Active',
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);

CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(100) NOT NULL
);

CREATE TABLE employee_projects (
    employee_id INT,
    project_id INT,
    PRIMARY KEY (employee_id, project_id),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id),
    FOREIGN KEY (project_id) REFERENCES projects(project_id)
);





























